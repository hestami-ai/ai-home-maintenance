/* tslint:disable */
/* eslint-disable */
/**
 * Hestami AI API
 * API documentation for Hestami AI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface PropertiesAccessCreateRequest {
    propertyId: string;
}

export interface PropertiesAccessUpdateRequest {
    accessId: string;
    propertyId: string;
}

export interface PropertiesDeleteDestroyRequest {
    propertyId: string;
}

export interface PropertiesRetrieve2Request {
    propertyId: string;
}

export interface PropertiesUpdateUpdateRequest {
    propertyId: string;
}

/**
 * 
 */
export class PropertiesApi extends runtime.BaseAPI {

    /**
     * Grant access to a property for a service provider. Only property owner can grant access.
     */
    async propertiesAccessCreateRaw(requestParameters: PropertiesAccessCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling propertiesAccessCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/properties/{property_id}/access/`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grant access to a property for a service provider. Only property owner can grant access.
     */
    async propertiesAccessCreate(requestParameters: PropertiesAccessCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertiesAccessCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Update property access permissions. Only property owner can update access permissions.
     */
    async propertiesAccessUpdateRaw(requestParameters: PropertiesAccessUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['accessId'] == null) {
            throw new runtime.RequiredError(
                'accessId',
                'Required parameter "accessId" was null or undefined when calling propertiesAccessUpdate().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling propertiesAccessUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/properties/{property_id}/access/{access_id}/`.replace(`{${"access_id"}}`, encodeURIComponent(String(requestParameters['accessId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update property access permissions. Only property owner can update access permissions.
     */
    async propertiesAccessUpdate(requestParameters: PropertiesAccessUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertiesAccessUpdateRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new property. Only available to property owners.
     */
    async propertiesCreateCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/properties/create/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new property. Only available to property owners.
     */
    async propertiesCreateCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertiesCreateCreateRaw(initOverrides);
    }

    /**
     * Soft delete a property. Only available to property owner.
     */
    async propertiesDeleteDestroyRaw(requestParameters: PropertiesDeleteDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling propertiesDeleteDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/properties/{property_id}/delete/`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Soft delete a property. Only available to property owner.
     */
    async propertiesDeleteDestroy(requestParameters: PropertiesDeleteDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertiesDeleteDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * List properties based on user\'s role and access permissions. Property owners see their properties, service providers see properties they have access to.
     */
    async propertiesRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/properties/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List properties based on user\'s role and access permissions. Property owners see their properties, service providers see properties they have access to.
     */
    async propertiesRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertiesRetrieveRaw(initOverrides);
    }

    /**
     * Retrieve property details. User must be owner or have access permission.
     */
    async propertiesRetrieve2Raw(requestParameters: PropertiesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling propertiesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/properties/{property_id}/`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve property details. User must be owner or have access permission.
     */
    async propertiesRetrieve2(requestParameters: PropertiesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertiesRetrieve2Raw(requestParameters, initOverrides);
    }

    /**
     * Update property details. User must be owner or have edit permission.
     */
    async propertiesUpdateUpdateRaw(requestParameters: PropertiesUpdateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling propertiesUpdateUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/properties/{property_id}/update/`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update property details. User must be owner or have edit permission.
     */
    async propertiesUpdateUpdate(requestParameters: PropertiesUpdateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertiesUpdateUpdateRaw(requestParameters, initOverrides);
    }

}
