/* tslint:disable */
/* eslint-disable */
/**
 * Hestami AI API
 * API documentation for Hestami AI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface MediaDestroyRequest {
    mediaId: string;
}

export interface MediaPropertiesRetrieveRequest {
    propertyId: string;
}

export interface MediaPropertiesStatsRetrieveRequest {
    propertyId: string;
}

export interface MediaPropertiesUploadCreateRequest {
    propertyId: string;
}

export interface MediaStatusRetrieveRequest {
    mediaId: string;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     * Soft delete a media file. Requires authentication and ownership verification.
     */
    async mediaDestroyRaw(requestParameters: MediaDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaId'] == null) {
            throw new runtime.RequiredError(
                'mediaId',
                'Required parameter "mediaId" was null or undefined when calling mediaDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/media/{media_id}/`.replace(`{${"media_id"}}`, encodeURIComponent(String(requestParameters['mediaId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Soft delete a media file. Requires authentication and ownership verification.
     */
    async mediaDestroy(requestParameters: MediaDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mediaDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * List all media files for a specific property. Requires authentication and property access verification.
     */
    async mediaPropertiesRetrieveRaw(requestParameters: MediaPropertiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling mediaPropertiesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/media/properties/{property_id}/`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List all media files for a specific property. Requires authentication and property access verification.
     */
    async mediaPropertiesRetrieve(requestParameters: MediaPropertiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mediaPropertiesRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * Get media statistics for a specific property. Includes total count, total size, and counts by media type.
     */
    async mediaPropertiesStatsRetrieveRaw(requestParameters: MediaPropertiesStatsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling mediaPropertiesStatsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/media/properties/{property_id}/stats/`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get media statistics for a specific property. Includes total count, total size, and counts by media type.
     */
    async mediaPropertiesStatsRetrieve(requestParameters: MediaPropertiesStatsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mediaPropertiesStatsRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * Upload media files for a specific property. Requires authentication and property ownership verification.
     */
    async mediaPropertiesUploadCreateRaw(requestParameters: MediaPropertiesUploadCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling mediaPropertiesUploadCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/media/properties/{property_id}/upload/`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload media files for a specific property. Requires authentication and property ownership verification.
     */
    async mediaPropertiesUploadCreate(requestParameters: MediaPropertiesUploadCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mediaPropertiesUploadCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Check the processing status of a media file
     */
    async mediaStatusRetrieveRaw(requestParameters: MediaStatusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaId'] == null) {
            throw new runtime.RequiredError(
                'mediaId',
                'Required parameter "mediaId" was null or undefined when calling mediaStatusRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/media/{media_id}/status/`.replace(`{${"media_id"}}`, encodeURIComponent(String(requestParameters['mediaId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check the processing status of a media file
     */
    async mediaStatusRetrieve(requestParameters: MediaStatusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mediaStatusRetrieveRaw(requestParameters, initOverrides);
    }

}
