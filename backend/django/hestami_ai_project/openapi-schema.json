openapi: 3.0.3
info:
  title: Hestami AI API
  version: 1.0.0
  description: API documentation for Hestami AI
paths:
  /api/media/{media_id}/:
    delete:
      operationId: media_destroy
      description: |-
        Soft delete a media file.
        Requires authentication and ownership verification.
      parameters:
      - in: path
        name: media_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - media
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/media/{media_id}/status/:
    get:
      operationId: media_status_retrieve
      description: Check the processing status of a media file
      parameters:
      - in: path
        name: media_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - media
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/media/properties/{property_id}/:
    get:
      operationId: media_properties_retrieve
      description: |-
        List all media files for a specific property.
        Requires authentication and property access verification.
      parameters:
      - in: path
        name: property_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - media
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/media/properties/{property_id}/stats/:
    get:
      operationId: media_properties_stats_retrieve
      description: |-
        Get media statistics for a specific property.
        Includes total count, total size, and counts by media type.
      parameters:
      - in: path
        name: property_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - media
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/media/properties/{property_id}/upload/:
    post:
      operationId: media_properties_upload_create
      description: |-
        Upload media files for a specific property.
        Requires authentication and property ownership verification.
      parameters:
      - in: path
        name: property_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - media
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/properties/:
    get:
      operationId: properties_retrieve
      description: |-
        List properties based on user's role and access permissions.
        Property owners see their properties, service providers see properties they have access to.
      tags:
      - properties
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/properties/{property_id}/:
    get:
      operationId: properties_retrieve_2
      description: Retrieve property details. User must be owner or have access permission.
      parameters:
      - in: path
        name: property_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - properties
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/properties/{property_id}/access/:
    post:
      operationId: properties_access_create
      description: |-
        Grant access to a property for a service provider.
        Only property owner can grant access.
      parameters:
      - in: path
        name: property_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - properties
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/properties/{property_id}/access/{access_id}/:
    put:
      operationId: properties_access_update
      description: |-
        Update property access permissions.
        Only property owner can update access permissions.
      parameters:
      - in: path
        name: access_id
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: property_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - properties
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/properties/{property_id}/delete/:
    delete:
      operationId: properties_delete_destroy
      description: Soft delete a property. Only available to property owner.
      parameters:
      - in: path
        name: property_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - properties
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/properties/{property_id}/update/:
    put:
      operationId: properties_update_update
      description: Update property details. User must be owner or have edit permission.
      parameters:
      - in: path
        name: property_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - properties
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/properties/create/:
    post:
      operationId: properties_create_create
      description: Create a new property. Only available to property owners.
      tags:
      - properties
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/services/categories/:
    get:
      operationId: services_categories_retrieve
      description: List all active service categories
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/services/providers/:
    get:
      operationId: services_providers_retrieve
      description: List service providers filtered by category and location
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/services/providers/profile/:
    get:
      operationId: services_providers_profile_retrieve
      description: Get or update service provider profile
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: services_providers_profile_update
      description: Get or update service provider profile
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/services/requests/:
    get:
      operationId: services_requests_retrieve
      description: List service requests based on user role
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/services/requests/{request_id}/:
    get:
      operationId: services_requests_retrieve_2
      description: Get or update service request details
      parameters:
      - in: path
        name: request_id
        schema:
          type: integer
        required: true
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: services_requests_update
      description: Get or update service request details
      parameters:
      - in: path
        name: request_id
        schema:
          type: integer
        required: true
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/services/requests/{request_id}/complete/:
    post:
      operationId: services_requests_complete_create
      description: Complete a service and create service report
      parameters:
      - in: path
        name: request_id
        schema:
          type: integer
        required: true
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/services/requests/{request_id}/review/:
    post:
      operationId: services_requests_review_create
      description: Create a review for a completed service
      parameters:
      - in: path
        name: request_id
        schema:
          type: integer
        required: true
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/services/requests/{request_id}/start/:
    post:
      operationId: services_requests_start_create
      description: Start a scheduled service
      parameters:
      - in: path
        name: request_id
        schema:
          type: integer
        required: true
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/services/requests/create/:
    post:
      operationId: services_requests_create_create
      description: Create a new service request
      tags:
      - services
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/login/:
    post:
      operationId: users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
          description: ''
  /api/users/password/change/:
    post:
      operationId: users_password_change_create
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/password/reset/:
    post:
      operationId: users_password_reset_create
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/password/reset/confirm/:
    post:
      operationId: users_password_reset_confirm_create
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/register/:
    post:
      operationId: users_register_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/token/refresh/:
    post:
      operationId: users_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
        confirm_password:
          type: string
          writeOnly: true
        user_role:
          $ref: '#/components/schemas/UserRoleEnum'
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        phone_number:
          type: string
          nullable: true
          maxLength: 20
      required:
      - confirm_password
      - email
      - first_name
      - last_name
      - password
      - user_role
    UserLogin:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    UserRoleEnum:
      enum:
      - PROPERTY_OWNER
      - SERVICE_PROVIDER
      - STAFF
      type: string
      description: |-
        * `PROPERTY_OWNER` - Property Owner
        * `SERVICE_PROVIDER` - Service Provider
        * `STAFF` - Hestami AI Staff
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
