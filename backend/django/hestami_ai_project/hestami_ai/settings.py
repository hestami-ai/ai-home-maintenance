"""
Django settings for hestami_ai_project project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add the project root and parent to the Python path
import sys
sys.path.insert(0, str(BASE_DIR))  # Add project directory
sys.path.insert(0, str(BASE_DIR.parent))  # Add parent directory

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', '#SHOULD_NOT_BE_USED_IN_PRODUCTION#')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
DEBUG_HESTAMI_AI = os.environ.get('DEBUG_HESTAMI_AI', False)

NGINX_SECURE_LINK_SECRET = os.environ.get('NGINX_SECURE_LINK_SECRET')

CLAMD_HOST = os.environ.get('CLAMD_HOST', 'clamav')
CLAMD_PORT = os.environ.get('CLAMD_PORT', '3310')

# Square settings
SQUARE_ACCESS_TOKEN = os.getenv('SQUARE_ACCESS_TOKEN')
SQUARE_APPLICATION_ID = os.getenv('SQUARE_APPLICATION_ID')
SQUARE_LOCATION_ID = os.getenv('SQUARE_LOCATION_ID', 'L81EPQE0JMNXR')  # Default sandbox location
SQUARE_ENVIRONMENT = os.getenv('SQUARE_ENVIRONMENT', 'sandbox')

# Square Subscription Plans
SQUARE_PLAN_ID_FREE = os.getenv('SQUARE_PLAN_ID_FREE')
SQUARE_PLAN_ID_CORE = os.getenv('SQUARE_PLAN_ID_CORE')
SQUARE_PLAN_ID_WHOLE = os.getenv('SQUARE_PLAN_ID_WHOLE')

# Validate required Square plan IDs
if not all([SQUARE_PLAN_ID_FREE, SQUARE_PLAN_ID_CORE, SQUARE_PLAN_ID_WHOLE]):
    raise ValueError(
        "All Square plan IDs must be set in environment variables: "
        "SQUARE_PLAN_ID_FREE, SQUARE_PLAN_ID_CORE, SQUARE_PLAN_ID_WHOLE"
    )

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'api']

AUTH_USER_MODEL = 'users.User'

SITE_ID = 1

WEBSITE_URL = os.environ.get('WEBSITE_URL')

# Application definition

INSTALLED_APPS = [
    'corsheaders',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'drf_spectacular',
    'rest_framework_simplejwt.token_blacklist',  

    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    'dj_rest_auth',
    'dj_rest_auth.registration',

    'djmoney',
    
    # Local apps
    #'users.apps.UsersConfig',
    'users',
    'properties',
    'media',
    'services',
    'subscriptions',
]



MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Custom middleware
    'users.middleware.LoginAttemptMiddleware',
    'users.middleware.SessionManagementMiddleware',
]

ROOT_URLCONF = 'hestami_ai.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hestami_ai.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('SQL_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.environ.get('SQL_DATABASE', BASE_DIR / 'db.sqlite3'),
        'USER': os.environ.get('SQL_USER', 'defaultsqlite3user'),
        'PASSWORD': os.environ.get('SQL_PASSWORD', 'defaultsqlite3password'),
        'HOST': os.environ.get('SQL_HOST', 'defaultsqlite3host'),
        'PORT': os.environ.get('SQL_PORT', 'defaultsqlite3port'),
        # 'OPTIONS': {
        #     'client_encoding': 'UTF8',
        #     'timezone': 'UTC',
        # },
        # 'TEST': {
        #     'NAME': 'hestami_ai_test_db',
        # },
        # 'CONN_MAX_AGE': 60,  # 1 minute connection persistence
        # 'ATOMIC_REQUESTS': True,  # Wrap each request in a transaction
    }
}

# Logging configuration
LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {  # Django framework logs
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.db': {  # Database queries
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security': {  # Security-related logs
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'hestami_ai': {  # All your project apps
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        }
    },
    'root': {  # Catch-all for any other logs
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# Password Validation Settings
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'user_attributes': ('email', 'first_name', 'last_name'),
            'max_similarity': 0.7,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'users.validators.SpecialCharacterValidator',
    },
    {
        'NAME': 'users.validators.UpperLowerCaseValidator',
    },
    {
        'NAME': 'users.validators.NumberValidator',
    },
    {
        'NAME': 'users.validators.PasswordHistoryValidator',
        'OPTIONS': {
            'history_length': 5,
        }
    },
    {
        'NAME': 'users.validators.PasswordExpiryValidator',
        'OPTIONS': {
            'max_age': 90,
        }
    },
    {
        'NAME': 'users.validators.PasswordComplexityValidator',
    },
]

# Custom User Model
AUTH_USER_MODEL = 'users.User'

# CORS Settings
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:8050',
    'http://127.0.0.1:8050',
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'DELETE',
    'OPTIONS',
    'PATCH',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_EXPOSE_HEADERS = [
    'content-type',
    'authorization',
]

# Cookie settings
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = False  # Set to True in production
SESSION_COOKIE_SAMESITE = 'Lax'  # Use 'Strict' in production

CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = False  # Set to True in production
CSRF_COOKIE_SAMESITE = 'Lax'  # Use 'Strict' in production
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'users.authentication.ServiceTokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Account settings
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    
    'JTI_CLAIM': 'jti',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=15),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
    # Grace period for token reuse during simultaneous refresh requests
    # This allows recently blacklisted tokens to still be used for a short period
    'SLIDING_TOKEN_REFRESH_LIFETIME_GRACE': timedelta(seconds=30),    
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Hestami AI API',
    'DESCRIPTION': 'API documentation for Hestami AI',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',
}

# Cache configuration for session and login attempt tracking
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


# JWT Settings
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_HTTPONLY': True,
    'JWT_AUTH_COOKIE': 'session_access_token',
    'JWT_AUTH_REFRESH_COOKIE': 'session_refresh_token',
    'JWT_AUTH_RETURN_EXPIRATION': True,
    'JWT_AUTH_SECURE': False,  # Set to True in production
    'SESSION_LOGIN': False,
    'JWT_TOKEN_PREFIX': 'Bearer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
}

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_COOKIE_AGE = 15 * 60  # 15 minutes
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_SECURE = True  # Only send over HTTPS
SESSION_COOKIE_HTTPONLY = True  # Not accessible via JavaScript
SESSION_COOKIE_SAMESITE = 'Strict'

# Maximum upload size - 100MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600

# Allowed file types
ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif']
ALLOWED_VIDEO_TYPES = ['video/mp4', 'video/quicktime']  # mp4 and mov

# File upload handlers
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = '/mnt/hestami-static/media'
STATIC_MEDIA_ROOT = '/mnt/hestami-static/static'

# Media storage patterns
PROPERTY_MEDIA_PATH = 'properties/{property_id}/{year}/{month}/{day}'
THUMBNAIL_FILENAME_PATTERN = 'thumbnail_{size}_{uuid}{extension}'

# Create media directories if they don't exist
os.makedirs(MEDIA_ROOT, exist_ok=True)
os.makedirs(STATIC_MEDIA_ROOT, exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'thumbnails'), exist_ok=True)

# Static files
STATIC_URL = 'static/'
STATIC_ROOT = STATIC_MEDIA_ROOT #os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Celery Configuration
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Broker settings
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True  # Explicitly enable connection retry on startup

# Celery Beat schedule settings
CELERY_BEAT_SCHEDULE = {
    'check-permit-retrieval-queue': {
        'task': 'properties.check_permit_retrieval_queue',
        'schedule': float(os.environ.get('PERMIT_PROCESSOR_INTERVAL', '5')),  # Run every 5 seconds by default
    },
    'check-property-county-queue': {
        'task': 'properties.check_property_county_queue',
        'schedule': float(os.environ.get('PROPERTY_COUNTY_PROCESSOR_INTERVAL', '5')),  # Run every 5 seconds by default
    },
    'process-pending-service-requests': {
        'task': 'services.tasks.process_pending_service_requests',
        'schedule': float(os.environ.get('SERVICE_REQUEST_PROCESSOR_INTERVAL', '5')),  # Run every 5 seconds by default
    },
}

# Task-specific settings
CELERY_TASK_TIME_LIMIT = 300  # 5 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 240  # 4 minutes
CELERY_TASK_ACKS_LATE = True
CELERY_TASK_REJECT_ON_WORKER_LOST = True

# Concurrency and Rate Limits
CELERY_WORKER_CONCURRENCY = 4  # Number of worker processes
CELERY_TASK_RATE_LIMIT = '100/m'  # Maximum 100 tasks per minute

# Result Backend Settings
CELERY_RESULT_EXPIRES = 3600  # Results expire after 1 hour
CELERY_TASK_TRACK_STARTED = True  # Track when tasks are started

# Logging
CELERY_WORKER_HIJACK_ROOT_LOGGER = False
CELERY_WORKER_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s] %(message)s'

# Temporal settings
TEMPORAL_SETTINGS = {
    'host': os.environ.get('TEMPORAL_HOST', 'temporal:7233'),
    'namespace': 'default',
    'task_queue': 'subscription-tasks',
    'retry_policy': {
        'initial_interval_seconds': 1,
        'backoff_coefficient': 2,
        'maximum_interval_seconds': 60,
        'maximum_attempts': 3,
    }
}

# Service account token for API authentication
TEMPORAL_SERVICE_ACCOUNT_TOKEN = os.environ.get('TEMPORAL_SERVICE_ACCOUNT_TOKEN')