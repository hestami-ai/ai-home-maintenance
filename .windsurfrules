Python Coding Standards Guide

1. General Principles

Write clear, modular, and maintainable code.

Prefer explicit over implicit logic.

Use type hints and static typing extensively.

Avoid unnecessary complexity; optimize for clarity first.

Follow Single Responsibility Principle (SRP).

Minimize Unnecessary Changes: Do not modify unrelated code, variable names, or comments unless directly relevant to the feature or bug fix being implemented.

Preserve Existing Functionality: Ensure that modifications do not break compatibility with dependent software or downstream processes.

2. OOP vs. Functional Programming

Use OOP when:

Stateful behavior is required (e.g., services, domain models).

Extensibility via inheritance or composition is needed.

Encapsulation and abstraction are crucial.

Use Functional Programming when:

Pure functions and immutability improve predictability.

Data transformations can be expressed as a pipeline.

Parallel processing benefits from side-effect-free functions.

3. Type Safety & Data Validation

Use Pydantic for structured validation.

Always define explicit types, avoid Optional[Any] unless necessary.

Use dataclasses for immutable models (@dataclass(frozen=True)).

4. Error Handling

Use try-except where necessary.

Avoid catching generic exceptions (except Exception).

Use structured logging instead of print().

Implement custom exceptions for domain-specific errors.

5. API Development

Use FastAPI for building APIs due to built-in type validation with Pydantic.

Keep API handlers separate from business logic.

Use dependency injection (Depends()) to manage services and configurations.

6. Database Interactions

Use SQLAlchemy ORM for structured models.

Prefer SQLAlchemy Core for performance-sensitive queries.

Keep database logic in separate repository layers.

7. Performance Optimization

Use async/await for I/O-bound tasks.

Minimize blocking calls (time.sleep() â†’ asyncio.sleep()).

Cache API responses when necessary.

8. Security Best Practices

Never store secrets in code; use environment variables.

Use bcrypt or argon2 for password hashing.

Enforce JWT authentication where necessary.

Validate user input to prevent XSS & SQL Injection.

9. Testing - OUT OF SCOPE FOR NOW FOR THIS PROJECT!!!

//Use pytest for unit tests.

//Prefer mocks over actual dependencies in unit tests.

//Write meaningful tests rather than chasing coverage.

10. Code Style & Formatting

Follow PEP 8.

Use black and isort for formatting.

Enforce pre-commit hooks.

Avoid Unnecessary Refactoring: Only update variable names, function signatures, or comments when there is a justifiable reason related to clarity, correctness, or optimization.

11. Documentation & Comments

Write concise docstrings (Google style or reStructuredText).

Preserve Comments: Do not remove or alter existing comments unless they are incorrect or misleading.

TypeScript & Next.js 14 Coding Standards Guide

1. General Principles

Write clear, modular, and maintainable code.

Prefer explicit over implicit logic.

Use strict typing (strict: true in tsconfig.json).

Avoid unnecessary complexity; optimize for clarity first.

Follow Single Responsibility Principle (SRP).

Minimize Unnecessary Changes: Do not modify unrelated code, variable names, or comments unless directly relevant to the feature or bug fix being implemented.

Preserve Existing Functionality: Ensure that modifications do not break compatibility with dependent software or downstream processes.

2. Type Safety & Data Validation

Always define explicit types, avoid any.

Use Type Aliases (type) for simple structures and Interfaces (interface) for complex objects.

Prefer utility types (Partial<T>, Pick<T, K>, Omit<T, K>).

Use Discriminated Unions for type-safe conditional logic.

3. Next.js Routing & API

Use the App Router (app/) for all projects.

Keep server components separate from client components ('use client' directive).

Use React Server Components (RSCs) for improved performance.

Leverage Middleware for request handling (middleware.ts).

4. Data Fetching

Prefer server-side data fetching with fetch() in server components.

Use React Query or useSWR() for client-side data fetching.

Utilize Edge Functions for low-latency requests.

Cache API responses (revalidate: <time>, fetch(url, { cache: 'force-cache' })).

5. Error Handling

Use try-catch for handling async errors.

Handle API errors with proper status codes (500, 400, 401, etc.).

Display user-friendly error messages.

Use Next.js error boundaries (error.tsx).

6. Authentication & Security

Use NextAuth.js or Clerk for authentication.

Store tokens securely (httpOnly cookies, Secure flag enabled).

Validate user input to prevent XSS & SQL Injection.

Use environment variables (process.env) for secrets.

7. Styling & UI

Use Tailwind CSS for styling.

Avoid inline styles unless dynamic styling is required.

Prefer shadcn/ui for UI components.

Structure styles via component-level CSS modules (.module.css).

8. Performance Optimization

Use lazy loading (next/dynamic for components, loading='lazy' for images).

Optimize images using next/image.

Minimize unnecessary re-renders (useMemo, useCallback).

Use React Profiler and React.memo() where necessary.

9. Testing - OUT OF SCOPE FOR NOW FOR THIS PROJECT!!!

//Use Jest and React Testing Library for unit tests.

//Prefer Cypress or Playwright for end-to-end (E2E) testing.

//Mock API calls using msw (Mock Service Worker).

//Write meaningful tests rather than chasing coverage.

10. Code Style & Linting

Use ESLint (eslint-config-next) and Prettier (prettier-plugin-tailwindcss).

Sort imports automatically using import-sort.

Format code with pre-commit hooks (lint-staged, husky).

Enforce consistent function and variable naming (camelCase).

Avoid Unnecessary Refactoring: Only update variable names, function signatures, or comments when there is a justifiable reason related to clarity, correctness, or optimization.

11. Documentation & Comments

Write concise JSDoc-style comments for functions and components.

Document API routes using Swagger (OpenAPI).

Maintain a README.md with setup and usage instructions.

Preserve Comments: Do not remove or alter existing comments unless they are incorrect or misleading.