#usda 1.0
(
    defaultPrim = "Table0"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Table0" (
    assetInfo = {
        asset identifier = @./Table0.usda@
        string name = "Table0"
    }
    customData = {
        string Category = "Table"
        string UUID = "660AEDA9-4692-4D9C-A378-0BFDACE811A8"
    }
    kind = "component"
)
{
    def Mesh "Table0"
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]
        rel material:binding = </Table0/Table0_color>
        normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)]
        point3f[] points = [(-0.48000532, -0.2376261, -0.24963999), (-0.48000532, 0.2376261, -0.24963999), (0.48000532, 0.2376261, -0.24963999), (0.48000532, -0.2376261, -0.24963999), (-0.48000532, -0.2376261, 0.24963999), (0.48000532, -0.2376261, 0.24963999), (0.48000532, 0.2376261, 0.24963999), (-0.48000532, 0.2376261, 0.24963999), (-0.48000532, -0.2376261, 0.24963999), (-0.48000532, -0.2376261, -0.24963999), (0.48000532, -0.2376261, -0.24963999), (0.48000532, -0.2376261, 0.24963999), (0.48000532, 0.2376261, 0.24963999), (0.48000532, 0.2376261, -0.24963999), (-0.48000532, 0.2376261, -0.24963999), (-0.48000532, 0.2376261, 0.24963999), (-0.48000532, 0.2376261, 0.24963999), (-0.48000532, 0.2376261, -0.24963999), (-0.48000532, -0.2376261, -0.24963999), (-0.48000532, -0.2376261, 0.24963999), (0.48000532, -0.2376261, 0.24963999), (0.48000532, -0.2376261, -0.24963999), (0.48000532, 0.2376261, -0.24963999), (0.48000532, 0.2376261, 0.24963999)]
        uniform token subdivisionScheme = "none"
        matrix4d xformOp:transform = ( (0.46752676367759705, 0, 0.883979082107544, 0), (0, 1, 0, 0), (-0.883979082107544, 0, 0.46752676367759705, 0), (1.763274073600769, -0.8008154630661011, -1.5634801387786865, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Material "Table0_color"
    {
        token outputs:surface.connect = </Table0/Table0_color/surfaceShader.outputs:surface>

        def Shader "surfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            color3f inputs:emissiveColor = (0, 0, 0)
            normal3f inputs:normal = (1, 1, 1)
            float inputs:occlusion = 1
            float inputs:opacity = 1
            token outputs:surface
        }
    }
}

