#usda 1.0
(
    defaultPrim = "Wall3"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Wall3" (
    assetInfo = {
        asset identifier = @./Wall3.usda@
        string name = "Wall3"
    }
    customData = {
        string Category = "Wall"
        string UUID = "5EA0F55F-2688-4D61-A6F2-F350DB0BCE47"
    }
    kind = "component"
)
{
    def Mesh "Wall3"
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 23, 22, 20, 22, 21, 20, 19, 18, 16, 18, 17, 16, 15, 14, 12, 14, 13, 12, 24, 25, 26, 24, 26, 27, 28, 29, 30, 28, 30, 31, 32, 33, 34, 32, 34, 35, 36, 37, 38, 36, 38, 39, 40, 41, 42, 40, 42, 43, 44, 45, 46, 44, 46, 47, 48, 49, 50, 48, 50, 51, 52, 53, 54, 52, 54, 55, 56, 57, 58, 58, 59, 56, 60, 62, 61, 63, 62, 60, 64, 66, 65, 67, 66, 64, 68, 70, 69, 71, 70, 68, 72, 74, 73, 75, 74, 72, 76, 78, 77, 79, 78, 76]
        rel material:binding = </Wall3/Wall3_color>
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-0.9999999, 0, -2.7300757e-8), (-0.9999999, 0, -2.7300757e-8), (-0.9999999, 0, -2.7300757e-8), (-0.9999999, 0, -2.7300757e-8), (2.5015652e-9, 0, -0.99999994), (2.5015652e-9, 0, -0.99999994), (2.5015652e-9, 0, -0.99999994), (2.5015652e-9, 0, -0.99999994), (0.9999843, 0, -0.0056025684), (0.9999843, 0, -0.0056025684), (0.9999843, 0, -0.0056025684), (0.9999843, 0, -0.0056025684), (0.0056025865, 0, 0.9999844), (0.0056025865, 0, 0.9999844), (0.0056025865, 0, 0.9999844), (0.0056025865, 0, 0.9999844)]
        point3f[] points = [(-1.634123, -1.2270818, 0), (0.28465557, -1.2270818, 0), (0.28465557, 1.2270818, 0), (-1.634123, 1.2270818, 0), (0.28465557, 0.85233665, 0), (1.4336679, 0.85233665, 0), (1.4336679, 1.2270818, 0), (0.28465557, 1.2270818, 0), (1.4336679, -1.2270818, 0), (1.6341231, -1.2270818, 0), (1.6341231, 1.2270818, 0), (1.4336679, 1.2270818, 0), (-1.634123, -1.2270818, -0.16), (0.28465557, -1.2270818, -0.16), (0.28465557, 1.2270818, -0.16), (-1.634123, 1.2270818, -0.16), (0.28465557, 0.85233665, -0.16), (1.4336679, 0.85233665, -0.16), (1.4336679, 1.2270818, -0.16), (0.28465557, 1.2270818, -0.16), (1.4336679, -1.2270818, -0.16), (1.6341231, -1.2270818, -0.16), (1.6341231, 1.2270818, -0.16), (1.4336679, 1.2270818, -0.16), (1.4336679, -1.2270818, 0), (1.4336679, 0.85233665, 0), (1.4336679, 0.85233665, -0.16), (1.4336679, -1.2270818, -0.16), (1.4336679, 0.85233665, 0), (0.28465557, 0.85233665, 0), (0.28465557, 0.85233665, -0.16), (1.4336679, 0.85233665, -0.16), (0.28465557, 0.85233665, 0), (0.28465557, -1.2270818, 0), (0.28465557, -1.2270818, -0.16), (0.28465557, 0.85233665, -0.16), (-1.634123, 1.2270818, 0), (1.634123, 1.2270818, 0), (1.634123, 1.2270818, -0.16), (-1.634123, 1.2270818, -0.16), (0.28465557, -1.2270818, 0), (-1.634123, -1.2270818, 0), (-1.634123, -1.2270818, -0.16), (0.28465557, -1.2270818, -0.16), (1.634123, -1.2270818, 0), (1.4336679, -1.2270818, 0), (1.4336679, -1.2270818, -0.16), (1.634123, -1.2270818, -0.16), (1.634123, 1.2270818, 0), (1.634123, -1.2270818, 0), (1.634123, -1.2270818, -0.16), (1.634123, 1.2270818, -0.16), (-1.634123, -1.2270818, 0), (-1.634123, 1.2270818, 0), (-1.634123, 1.2270818, -0.16), (-1.634123, -1.2270818, -0.16), (1.634123, -1.2270818, 5.9604645e-7), (1.634123, -1.2270818, -0.15999939), (1.793229, -1.2270818, -0.15999939), (1.7941204, -1.2270818, -0.00089581485), (1.634123, 1.2270818, 5.9604645e-7), (1.634123, 1.2270818, -0.15999939), (1.793229, 1.2270818, -0.15999939), (1.7941204, 1.2270818, -0.00089581485), (1.634123, -1.2270818, 5.9604645e-7), (1.634123, -1.2270818, -0.15999939), (1.634123, 1.2270818, -0.15999939), (1.634123, 1.2270818, 5.9604645e-7), (1.634123, -1.2270818, -0.15999939), (1.793229, -1.2270818, -0.15999939), (1.793229, 1.2270818, -0.15999939), (1.634123, 1.2270818, -0.15999939), (1.793229, -1.2270818, -0.15999939), (1.7941204, -1.2270818, -0.00089581485), (1.7941204, 1.2270818, -0.00089581485), (1.793229, 1.2270818, -0.15999939), (1.7941204, -1.2270818, -0.00089581485), (1.634123, -1.2270818, 5.9604645e-7), (1.634123, 1.2270818, 5.9604645e-7), (1.7941204, 1.2270818, -0.00089581485)]
        uniform token subdivisionScheme = "none"
        matrix4d xformOp:transform = ( (0.31638336181640625, 0, -0.9486314058303833, 0), (0, 1, 0, 0), (0.9486313462257385, 0, 0.31638336181640625, 0), (-0.8329055905342102, 0.18864037096500397, -1.2484976053237915, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Material "Wall3_color"
    {
        token outputs:surface.connect = </Wall3/Wall3_color/surfaceShader.outputs:surface>

        def Shader "surfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            color3f inputs:emissiveColor = (0, 0, 0)
            normal3f inputs:normal = (1, 1, 1)
            float inputs:occlusion = 1
            float inputs:opacity = 1
            token outputs:surface
        }
    }
}

