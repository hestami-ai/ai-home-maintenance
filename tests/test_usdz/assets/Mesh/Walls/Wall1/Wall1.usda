#usda 1.0
(
    defaultPrim = "Wall1"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Wall1" (
    assetInfo = {
        asset identifier = @./Wall1.usda@
        string name = "Wall1"
    }
    customData = {
        string Category = "Wall"
        string UUID = "CA0749AF-6888-4B0A-B315-2CEFA11188F1"
    }
    kind = "component"
)
{
    def Mesh "Wall1"
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 31, 30, 28, 30, 29, 28, 27, 26, 24, 26, 25, 24, 23, 22, 20, 22, 21, 20, 19, 18, 16, 18, 17, 16, 32, 33, 34, 32, 34, 35, 36, 37, 38, 36, 38, 39, 40, 41, 42, 40, 42, 43, 44, 45, 46, 44, 46, 47, 48, 49, 50, 48, 50, 51, 52, 53, 54, 52, 54, 55, 56, 57, 58, 56, 58, 59, 60, 61, 62, 60, 62, 63, 64, 65, 66, 66, 67, 64, 68, 70, 69, 71, 70, 68, 72, 74, 73, 75, 74, 72, 76, 78, 77, 79, 78, 76, 80, 82, 81, 83, 82, 80, 84, 86, 85, 87, 86, 84]
        rel material:binding = </Wall1/Wall1_color>
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-0.99999994, 0, -1.4878481e-8), (-0.99999994, 0, -1.4878481e-8), (-0.99999994, 0, -1.4878481e-8), (-0.99999994, 0, -1.4878481e-8), (-1.4878481e-8, 0, -0.99999994), (-1.4878481e-8, 0, -0.99999994), (-1.4878481e-8, 0, -0.99999994), (-1.4878481e-8, 0, -0.99999994), (0.99997413, 0, -0.0071761925), (0.99997413, 0, -0.0071761925), (0.99997413, 0, -0.0071761925), (0.99997413, 0, -0.0071761925), (0.007176227, 0, 0.99997413), (0.007176227, 0, 0.99997413), (0.007176227, 0, 0.99997413), (0.007176227, 0, 0.99997413)]
        point3f[] points = [(-1.5058719, -1.2270818, 0), (0.6708981, -1.2270818, 0), (0.6708981, 1.2270818, 0), (-1.5058719, 1.2270818, 0), (0.67089796, -1.2270818, 0), (1.3724728, -1.2270818, 0), (1.3724728, -1.2270815, 0), (0.67089796, -1.2270815, 0), (0.67089796, 0.87047815, 0), (1.3724728, 0.87047815, 0), (1.3724728, 1.2270818, 0), (0.67089796, 1.2270818, 0), (1.3724728, -1.2270818, 0), (1.5058718, -1.2270818, 0), (1.5058718, 1.2270818, 0), (1.3724728, 1.2270818, 0), (-1.5058719, -1.2270818, -0.16), (0.6708981, -1.2270818, -0.16), (0.6708981, 1.2270818, -0.16), (-1.5058719, 1.2270818, -0.16), (0.67089796, -1.2270818, -0.16), (1.3724728, -1.2270818, -0.16), (1.3724728, -1.2270815, -0.16), (0.67089796, -1.2270815, -0.16), (0.67089796, 0.87047815, -0.16), (1.3724728, 0.87047815, -0.16), (1.3724728, 1.2270818, -0.16), (0.67089796, 1.2270818, -0.16), (1.3724728, -1.2270818, -0.16), (1.5058718, -1.2270818, -0.16), (1.5058718, 1.2270818, -0.16), (1.3724728, 1.2270818, -0.16), (1.3724726, -1.2270815, 0), (1.3724726, 0.87047815, 0), (1.3724726, 0.87047815, -0.16), (1.3724726, -1.2270815, -0.16), (1.3724726, 0.87047815, 0), (0.67089796, 0.87047815, 0), (0.67089796, 0.87047815, -0.16), (1.3724726, 0.87047815, -0.16), (0.67089796, 0.87047815, 0), (0.67089796, -1.2270815, 0), (0.67089796, -1.2270815, -0.16), (0.67089796, 0.87047815, -0.16), (-1.5058719, 1.2270818, 0), (1.5058719, 1.2270818, 0), (1.5058719, 1.2270818, -0.16), (-1.5058719, 1.2270818, -0.16), (0.67089796, -1.2270818, 0), (-1.5058719, -1.2270818, 0), (-1.5058719, -1.2270818, -0.16), (0.67089796, -1.2270818, -0.16), (1.5058719, -1.2270818, 0), (1.3724726, -1.2270818, 0), (1.3724726, -1.2270818, -0.16), (1.5058719, -1.2270818, -0.16), (1.5058719, 1.2270818, 0), (1.5058719, -1.2270818, 0), (1.5058719, -1.2270818, -0.16), (1.5058719, 1.2270818, -0.16), (-1.5058719, -1.2270818, 0), (-1.5058719, 1.2270818, 0), (-1.5058719, 1.2270818, -0.16), (-1.5058719, -1.2270818, -0.16), (1.5058719, -1.2270818, 0), (1.5058719, -1.2270818, -0.15999998), (1.6647278, -1.2270818, -0.15999998), (1.6658678, -1.2270818, -0.0011481908), (1.5058719, 1.2270818, 0), (1.5058719, 1.2270818, -0.15999998), (1.6647278, 1.2270818, -0.15999998), (1.6658678, 1.2270818, -0.0011481908), (1.5058719, -1.2270818, 0), (1.5058719, -1.2270818, -0.15999998), (1.5058719, 1.2270818, -0.15999998), (1.5058719, 1.2270818, 0), (1.5058719, -1.2270818, -0.15999998), (1.6647278, -1.2270818, -0.15999998), (1.6647278, 1.2270818, -0.15999998), (1.5058719, 1.2270818, -0.15999998), (1.6647278, -1.2270818, -0.15999998), (1.6658678, -1.2270818, -0.0011481908), (1.6658678, 1.2270818, -0.0011481908), (1.6647278, 1.2270818, -0.15999998), (1.6658678, -1.2270818, -0.0011481908), (1.5058719, -1.2270818, 0), (1.5058719, 1.2270818, 0), (1.6658678, 1.2270818, -0.0011481908)]
        uniform token subdivisionScheme = "none"
        matrix4d xformOp:transform = ( (-0.9463365077972412, 0, -0.3231827914714813, 0), (0, 1, 0, 0), (0.3231828212738037, 0, -0.9463365077972412, 0), (0.07514667510986328, 0.18864037096500397, 0.788354754447937, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Material "Wall1_color"
    {
        token outputs:surface.connect = </Wall1/Wall1_color/surfaceShader.outputs:surface>

        def Shader "surfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            color3f inputs:emissiveColor = (0, 0, 0)
            normal3f inputs:normal = (1, 1, 1)
            float inputs:occlusion = 1
            float inputs:opacity = 1
            token outputs:surface
        }
    }
}

